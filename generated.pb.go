// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: serialize/generated.proto

package main

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b9aa92606dc2573, []int{0}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Data)(nil), "serialize.Data")
	proto.RegisterMapType((map[int64]int64)(nil), "serialize.Data.MapIntEntry")
	proto.RegisterMapType((map[string]string)(nil), "serialize.Data.MapStrEntry")
}

func init() { proto.RegisterFile("serialize/generated.proto", fileDescriptor_1b9aa92606dc2573) }

var fileDescriptor_1b9aa92606dc2573 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xb1, 0x6e, 0xd3, 0x40,
	0x18, 0xc7, 0x7d, 0xb6, 0xe3, 0xda, 0x17, 0x40, 0xe8, 0x04, 0xd5, 0xe1, 0x4a, 0xb6, 0xc5, 0xe4,
	0x05, 0x47, 0x75, 0x18, 0x4a, 0xb7, 0x86, 0x32, 0x64, 0x60, 0x39, 0x98, 0x58, 0xa2, 0x4b, 0x72,
	0x35, 0x16, 0xb1, 0x2f, 0x3a, 0x7f, 0x41, 0x0a, 0x4f, 0xc0, 0xc8, 0xc8, 0x58, 0x56, 0x9e, 0xa4,
	0x23, 0x4f, 0x50, 0x50, 0xfa, 0x02, 0x3c, 0x02, 0xf2, 0x39, 0xb1, 0x3d, 0xd0, 0xed, 0xfb, 0xff,
	0xfc, 0xfd, 0xfe, 0xb2, 0xfc, 0x19, 0x3f, 0xab, 0x84, 0xca, 0xf9, 0x2a, 0xff, 0x22, 0x46, 0x99,
	0x28, 0x85, 0xe2, 0x20, 0x96, 0xc9, 0x5a, 0x49, 0x90, 0xc4, 0x6b, 0x1f, 0xf9, 0x2f, 0xb2, 0x1c,
	0x3e, 0x6e, 0xe6, 0xc9, 0x42, 0x16, 0xa3, 0x4c, 0x66, 0x72, 0xa4, 0x37, 0xe6, 0x9b, 0x2b, 0x9d,
	0x74, 0xd0, 0x53, 0x63, 0xfa, 0x61, 0x26, 0x65, 0xb6, 0x12, 0xdd, 0x16, 0xe4, 0x85, 0xa8, 0x80,
	0x17, 0xeb, 0x66, 0xe1, 0xf9, 0x4f, 0x1b, 0xdb, 0x97, 0x1c, 0x38, 0x39, 0xc6, 0x66, 0xbe, 0xa4,
	0x28, 0x42, 0xb1, 0x35, 0x71, 0x76, 0xb7, 0xa1, 0x39, 0xbd, 0x64, 0x66, 0xbe, 0x24, 0x67, 0xd8,
	0x5e, 0x72, 0x10, 0xd4, 0x8c, 0x50, 0x3c, 0x4c, 0xfd, 0xa4, 0x29, 0x4c, 0x0e, 0x85, 0xc9, 0xfb,
	0x43, 0xe1, 0xc4, 0xbd, 0xb9, 0x0d, 0x8d, 0x6f, 0xbf, 0x43, 0xc4, 0xb4, 0x41, 0x9e, 0x62, 0xa7,
	0xe4, 0x85, 0x98, 0x71, 0x6a, 0x45, 0x28, 0xf6, 0xd8, 0xa0, 0x4e, 0x17, 0x2d, 0x9e, 0x53, 0xbb,
	0xc3, 0x93, 0x16, 0x2f, 0xe8, 0xa0, 0xc3, 0xaf, 0xc9, 0x31, 0x76, 0x16, 0x72, 0x53, 0xc2, 0x29,
	0x75, 0xea, 0x57, 0x63, 0xfb, 0xd4, 0xf2, 0x94, 0x1e, 0xf5, 0x78, 0xda, 0xf2, 0x31, 0x75, 0x7b,
	0x7c, 0x4c, 0x08, 0xb6, 0x79, 0x01, 0xa7, 0xd4, 0x8b, 0x50, 0x8c, 0x98, 0x9e, 0xf7, 0x2c, 0xa5,
	0xb8, 0x65, 0x69, 0xcd, 0xae, 0x56, 0x3c, 0xa3, 0xc3, 0x08, 0xc5, 0x2e, 0xd3, 0x33, 0x39, 0xc1,
	0x5e, 0x05, 0x6a, 0xc6, 0x95, 0xe2, 0x5b, 0xfa, 0x20, 0xb2, 0x62, 0x8f, 0xb9, 0x15, 0xa8, 0x8b,
	0x3a, 0x93, 0x97, 0xf8, 0xa8, 0xe0, 0xeb, 0x59, 0x05, 0x8a, 0x3e, 0x8c, 0xac, 0x78, 0x98, 0x9e,
	0x24, 0xed, 0xb5, 0x92, 0xfa, 0xcb, 0x26, 0x6f, 0xf9, 0xfa, 0x1d, 0xa8, 0x37, 0x25, 0xa8, 0x2d,
	0x73, 0x0a, 0x1d, 0x0e, 0x56, 0x5e, 0x02, 0x7d, 0x74, 0xaf, 0x35, 0x2d, 0xa1, 0xb3, 0xa6, 0x25,
	0xf8, 0xaf, 0xf0, 0xb0, 0x57, 0x46, 0x1e, 0x63, 0xeb, 0x93, 0xd8, 0xea, 0x9b, 0x79, 0xac, 0x1e,
	0xc9, 0x13, 0x3c, 0xf8, 0xcc, 0x57, 0x9b, 0xe6, 0x5a, 0x1e, 0x6b, 0xc2, 0xb9, 0x79, 0x86, 0xf6,
	0xea, 0xa1, 0xb1, 0xaf, 0x5a, 0xff, 0x51, 0xad, 0x9e, 0x7a, 0xee, 0x7e, 0xbd, 0x0e, 0x8d, 0xbf,
	0x3f, 0x42, 0x63, 0xe2, 0xdf, 0xec, 0x02, 0xf4, 0x6b, 0x17, 0xa0, 0x3f, 0xbb, 0xc0, 0xf8, 0x7e,
	0x17, 0x18, 0xd7, 0x77, 0x01, 0xfa, 0x60, 0x17, 0x3c, 0x2f, 0xe7, 0x8e, 0xfe, 0x23, 0xc6, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x68, 0xf5, 0xc4, 0xc7, 0x02, 0x00, 0x00,
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MapInt) > 0 {
		for k := range m.MapInt {
			v := m.MapInt[k]
			baseI := i
			i = encodeVarintGenerated(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintGenerated(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.MapStr) > 0 {
		for k := range m.MapStr {
			v := m.MapStr[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.StrArray) > 0 {
		for iNdEx := len(m.StrArray) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StrArray[iNdEx])
			copy(dAtA[i:], m.StrArray[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.StrArray[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Flag {
		i--
		if m.Flag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Amt2 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amt2))))
		i--
		dAtA[i] = 0x51
	}
	if m.Amt1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Amt1))))
		i--
		dAtA[i] = 0x49
	}
	if m.Count3 != 0 {
		i = encodeVarintGenerated(dAtA, i, uint64(m.Count3))
		i--
		dAtA[i] = 0x40
	}
	if m.Count2 != 0 {
		i = encodeVarintGenerated(dAtA, i, uint64(m.Count2))
		i--
		dAtA[i] = 0x38
	}
	if m.Count1 != 0 {
		i = encodeVarintGenerated(dAtA, i, uint64(m.Count1))
		i--
		dAtA[i] = 0x30
	}
	if len(m.NameC) > 0 {
		i -= len(m.NameC)
		copy(dAtA[i:], m.NameC)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.NameC)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NameB) > 0 {
		i -= len(m.NameB)
		copy(dAtA[i:], m.NameB)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.NameB)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NameA) > 0 {
		i -= len(m.NameA)
		copy(dAtA[i:], m.NameA)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.NameA)))
		i--
		dAtA[i] = 0x1a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Date, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Date):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGenerated(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if m.ID != 0 {
		i = encodeVarintGenerated(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Data) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGenerated(uint64(m.ID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Date)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.NameA)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.NameB)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.NameC)
	if l > 0 {
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Count1 != 0 {
		n += 1 + sovGenerated(uint64(m.Count1))
	}
	if m.Count2 != 0 {
		n += 1 + sovGenerated(uint64(m.Count2))
	}
	if m.Count3 != 0 {
		n += 1 + sovGenerated(uint64(m.Count3))
	}
	if m.Amt1 != 0 {
		n += 9
	}
	if m.Amt2 != 0 {
		n += 9
	}
	if m.Flag {
		n += 2
	}
	if len(m.StrArray) > 0 {
		for _, s := range m.StrArray {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.MapStr) > 0 {
		for k, v := range m.MapStr {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.MapInt) > 0 {
		for k, v := range m.MapInt {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGenerated(uint64(k)) + 1 + sovGenerated(uint64(v))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Date, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count1", wireType)
			}
			m.Count1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count2", wireType)
			}
			m.Count2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count3", wireType)
			}
			m.Count3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count3 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amt1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amt1 = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amt2", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Amt2 = float64(math.Float64frombits(v))
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrArray", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrArray = append(m.StrArray, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapStr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapStr == nil {
				m.MapStr = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MapStr[mapkey] = mapvalue
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapInt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapInt == nil {
				m.MapInt = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MapInt[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
